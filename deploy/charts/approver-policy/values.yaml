crds:
  # This option decides if the CRDs should be installed
  # as part of the Helm installation.
  enabled: true

  # This option makes it so that the "helm.sh/resource-policy": keep
  # annotation is added to the CRD. This will prevent Helm from uninstalling
  # the CRD when the Helm release is uninstalled.
  # WARNING: when the CRDs are removed, all cert-manager custom resources
  # (Certificates, Issuers, ...) will be removed too by the garbage collector.
  keep: true

# Number of replicas of approver-policy to run.
replicaCount: 1

image:
  # Target image registry. This value is prepended to the target image repository, if set.
  # For example:
  #   registry: quay.io
  #   repository: jetstack/cert-manager-approver-policy
  # +docs:property
  # registry: quay.io

  # Target image repository.
  repository: quay.io/jetstack/cert-manager-approver-policy

  # Override the image tag to deploy by setting this variable.
  # If no value is set, the chart's appVersion is used.
  # +docs:property
  # tag: vX.Y.Z

  # Target image digest. Override any tag, if set.
  # For example:
  #   digest: sha256:0e072dddd1f7f8fc8909a2ca6f65e76c5f0d2fcfb8be47935ae3457e8bbceb20
  # +docs:property
  # digest: sha256:...

  # Kubernetes imagePullPolicy on Deployment.
  pullPolicy: IfNotPresent

# Optional secrets used for pulling the approver-policy container image.
imagePullSecrets: []

app:
  # Verbosity of approver-policy logging. This is a value from 1 to 5.
  logLevel: 1

  # Extra CLI arguments that will be passed to the approver-policy process.
  extraArgs: []

  # List if signer names that approver-policy will be given permission to
  # approve and deny. CertificateRequests referencing these signer names can be
  # processed by approver-policy. 
  #
  # ref: https://cert-manager.io/docs/concepts/certificaterequest/#approval
  # +docs:property
  approveSignerNames:
  - "issuers.cert-manager.io/*"
  - "clusterissuers.cert-manager.io/*"

  metrics:
    # Port for exposing Prometheus metrics on 0.0.0.0 on path '/metrics'.
    port: 9402
    # The service to expose metrics endpoint.
    service:
      # Create a Service resource to expose metrics endpoint.
      enabled: true
      # The service type to expose metrics.
      type: ClusterIP
      # The ServiceMonitor resource for this Service.
      servicemonitor:
        # Create Prometheus ServiceMonitor resource for approver-policy.
        enabled: false
        # The value for the "prometheus" label on the ServiceMonitor. This allows
        # for multiple Prometheus instances selecting difference ServiceMonitors 
        # using label selectors.
        prometheusInstance: default
        # The interval that the Prometheus will scrape for metrics.
        interval: 10s
        # The timeout on each metric probe request.
        scrapeTimeout: 5s
        # Additional labels to give the ServiceMonitor resource.
        labels: {}

  readinessProbe:
    # The container port to expose approver-policy HTTP readiness probe on
    # default network interface.
    port: 6060

  webhook:
    # The host that the webhook listens on.
    host: 0.0.0.0

    # The port that the webhook listens on.
    port: 10250

    # The timeout of webhook HTTP request.
    timeoutSeconds: 5

    service:
      # The type of Kubernetes Service used by the webhook.
      type: ClusterIP

      # The nodePort set on the Service used by the webhook.
      # +docs:property
      # nodePort: 8080

    # Boolean value, expose pod on hostNetwork.
    # Required when running a custom CNI in managed providers such as AWS EKS.
    #
    # For more information, see [AWS EKS](https://cert-manager.io/docs/installation/compatibility/#aws-eks).
    hostNetwork: false

    # This value may need to be changed if `hostNetwork: true`
    dnsPolicy: ClusterFirst

    # A Kubernetes Affinity, if required. For more information, see [Affinity v1 core](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#affinity-v1-core).
    #
    # For example:
    #   affinity:
    #     nodeAffinity:
    #      requiredDuringSchedulingIgnoredDuringExecution:
    #        nodeSelectorTerms:
    #        - matchExpressions:
    #          - key: foo.bar.com/role
    #            operator: In
    #            values:
    #            - master
    affinity: {}

    # The nodeSelector on Pods tells Kubernetes to schedule Pods on the nodes with
    # matching labels.
    # For more information, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).
    nodeSelector: {}

    # A list of Kubernetes Tolerations, if required. For more information, see [Toleration v1 core](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#toleration-v1-core).
    #
    # For example:
    #   tolerations:
    #   - key: foo.bar.com/role
    #     operator: Equal
    #     value: master
    #     effect: NoSchedule
    tolerations: []

# Optional extra volume mounts. Useful for mounting custom root CAs.
#
# For example:
#  volumeMounts:
#  - name: my-volume-mount
#    mountPath: /etc/approver-policy/secrets
volumeMounts: []

# Optional extra volumes.
#
# For example:
#  volumes:
#  - name: my-volume
#    secret:
#      secretName: my-secret
volumes: []

# Kubernetes pod resources.
# For more information, see [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
#
# For example:
#  resources:
#    limits:
#      cpu: 100m
#      memory: 128Mi
#    requests:
#      cpu: 100m
#      memory: 128Mi
resources: {}

# Allow custom labels to be placed on resources - optional.
commonLabels: {}

# Allow custom annotations to be placed on cert-manager-approver pod - optional.
podAnnotations: {}
